
$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

$color-grey-dark: #777;
$color-white: #fff;

*,
*::after,
*::before {
    margin: 0px;
    padding: 0px;
    box-sizing: inherit;
}

html {
    /* Setting HTML font to 62.5% allows user to zoon in and out while giving us the 10px base from 16px default */
    /* Later allows for easier use of rem - note: rem not compatible with ES9 */
    font-size: 62.5%;
}
body {
    font-family: "Lato", sans serif;
    font-weight: 400;
    /* font-size: 16px; */
    line-height: 1.7;
    color: $color-grey-dark;
    padding: 3rem;

    box-sizing: border-box;
}

.header{
    height: 95vh;
    background-image: linear-gradient(
        to right bottom,
        rgba($color-primary-light, 0.8),
        rgba($color-primary-dark, 0.8)), 
         url(../img/hero.jpg);
    background-size: cover;
    background-position: top; /* Makes sure that top of the image will always stay at the top of the div. Center will keep the center of the image always in teh centre. Top and bottom will be cup off with resize. */
    position:relative;

    clip-path: polygon( 0 0, 100% 0, 100% 80%, 0 100%); /* Make cool cut of header image */
}

.header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
}
.header__logo {
    height: 3.5rem;
}

.header__text-box {
    /* To center element and it be responsive */
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
}
.heading-primary {
    color: $color-white;
    text-transform: uppercase;

    backface-visibility: hidden;
    margin-bottom: 6rem;
} 
.heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;

    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;

    /* animation-delay: 3s; 
    animation-iteration-count: 3; */
}
.heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;

    animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-10rem);
    }
    80% {
        transform: translatex(1rem);
    }
    100% {
        opacity: 1;
        transform: translate(0);
    }
}
@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }
    80% {
        transform: translatex(-10rem);
    }
    100% {
        opacity: 1;
        transform: translate(0);
    }
}
@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(2rem);
    }
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

.btn:link,
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    font-size: 1.6rem;
    /* Transition property has to be in the initial state */
    transition: all .2s;
    position: relative;
}
.btn:hover {
    transform: translateY(-0.3rem);
    box-shadow: 0  1rem 2rem rgba(0,0,0,0.2);
}

/* Transalte always change in relation to the original state. NOT the hover state like is first applied here */
.btn:active {
    transform: translateY(-.1rem);
    box-shadow: 0  .5rem 1rem rgba(0,0,0,0.2);
}
.btn--white {
    background-color: $color-white;;
    color: $color-grey-dark;
}
.btn::after {
    /* Have to specify content and display */
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* To place this pseudoelement right behind the button */
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s;
}
.btn--white::after {
    background-color: $color-white;
}
.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0;
}
.btn--animated {
    animation: moveInBottom .5s ease-out 0.75s;
    animation-fill-mode: backwards;
}